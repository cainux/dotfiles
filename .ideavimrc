"
" Enable 'Track Action Ids' to see action names
" as you perform them in Rider
"
" Ensure the following plugins are installed:
" - Which-Key
" - vim-flash
" - Fuzzier (modeled after telescope.nvim)

" Leader
let mapleader=" "

" Reload config
let g:WhichKeyDesc_source_000 = "<leader>x Reload..."

let g:WhichKeyDesc_source_001 = "<leader>xx Reload IdeaVim config"
nnoremap <leader>xx :source ~/.ideavimrc<CR>

" Save all
let g:WhichKeyDesc_save_all_000 = "<leader>w [W]rite..."

let g:WhichKeyDesc_save_all_001 = "<leader>wa Write [A]ll"
nnoremap <leader>wa :wa<CR>

" which-key plugin
set which-key
set notimeout
" OR
" set timeoutlen=5000
" Descriptions for which-key

" Relative line numbers
set relativenumber
set number

" Moving around ===========================================
map <C-o> <Action>(Back)
map <C-i> <Action>(Forward)

let g:WhichKeyDesc_goto_000 = "<leader>g Go to..."

let g:WhichKeyDesc_goto_001 = "<leader>gd Declaration"
map <leader>gd <Action>(GotoDeclaration)

let g:WhichKeyDesc_goto_002 = "<leader>gD Implementation"
map <leader>gD <Action>(ReSharperGotoImplementation)

let g:WhichKeyDesc_goto_003 = "<leader>gc Toggle Commenting"
map <leader>gc <Action>(CommentByLineComment)

let g:WhichKeyDesc_goto_004 = "<leader>ge Next [E]rror"
map <leader>ge <Action>(ReSharperGotoNextErrorInSolution)

let g:WhichKeyDesc_goto_005 = "<leader>gr [R]eferences"
map <leader>gr <Action>(FindUsages)
" =========================================================

" Modify code =============================================
let g:WhichKeyDesc_code_000 = "<leader>r [R]ename"

let g:WhichKeyDesc_code_001 = "<leader>rn [R]e[n]ame"
map <leader>rn <Action>(RenameElement)
" =========================================================

" Testing =================================================
let g:WhichKeyDesc_test_000 = "<leader>t [T]est"

let g:WhichKeyDesc_test_001 = "<leader>ts [T]est [S]tatus"
map <leader>ts <Action>(ActivateUnitTestsToolWindow)

let g:WhichKeyDesc_test_002 = "<leader>tr [T]est [R]un Context"
map <leader>tr <Action>(RiderUnitTestRunContextAction)

let g:WhichKeyDesc_test_003 = "<leader>tc [T]est [C]over"
map <leader>tr <Action>(RiderUnitTestCoverSolutionAction)
" =========================================================

" Building ================================================
let g:WhichKeyDesc_build_000 = "<leader>b [B]uild..."

let g:WhichKeyDesc_build_001 = "<leader>bb [B]uild Solution"
map <leader>bb <Action>(BuildSolutionAction)

let g:WhichKeyDesc_build_002 = "<leader>br [R]un"
map <leader>br <Action>(Run)

let g:WhichKeyDesc_build_003 = "<leader>bd [D]ebug"
map <leader>bd <Action>(Debug)

let g:WhichKeyDesc_build_004 = "<leader>bs [S]top"
map <leader>bs <Action>(Stop)
" =========================================================

" Debugging ===============================================
let g:WhichKeyDesc_debug_000 = "<leader>d [D]ebug..."

let g:WhichKeyDesc_debug_001 = "<leader>db Toggle [B]reakpoint"
map <leader>db <Action>(ToggleLineBreakpoint)

let g:WhichKeyDesc_debug_002 = "<leader>dc [C]lear Breakpoints"
map <leader>dc <Action>(RiderRemoveAllLineBreakpoints)

let g:WhichKeyDesc_debug_003 = "<leader>ds [S]tep..."
let g:WhichKeyDesc_debug_004 = "<leader>dso [S]tep [O]ver"
map <leader>dso <Action>(StepOver)

let g:WhichKeyDesc_debug_005 = "<leader>dsi [S]tep [I]nto"
map <leader>dsi <Action>(StepInto)

let g:WhichKeyDesc_debug_006 = "<leader>dr [R]esume"
map <leader>dr <Action>(Resume)
" =========================================================

" Code actions ============================================
let g:WhichKeyDesc_code_000 = "<leader>c [C]ode..."

let g:WhichKeyDesc_code_001 = "<leader>ca [C]ode [A]ction"
map <leader>ca <Action>(ShowIntentionActions)

let g:WhichKeyDesc_code_002 = "<leader>cf [C]ode [F]ormat"
map <leader>cf <Action>(ReformatCode)

let g:WhichKeyDesc_code_003 = "<leader>cr [C]ode [R]efactor"
map <leader>cr <Action>(Refactorings.QuickListPopupAction)
" =========================================================

" Searching ===============================================
let g:WhichKeyDesc_search_000 = "<leader>s [S]earch..."

let g:WhichKeyDesc_search_001 = "<leader>sf [S]earch [F]iles"
map <leader>sf <Action>(com.mituuz.fuzzier.Fuzzier)

let g:WhichKeyDesc_search_002 = "<leader>sr [S]earch [R]epository"
map <leader>sr <Action>(com.mituuz.fuzzier.FuzzierVCS)
" =========================================================

" vim-flash ===============================================
let g:WhichKeyDesc_flash_000 = "<leader>h ⚡️Flash"

map <leader>h <Action>(flash.search)
" =========================================================

" My own weird ones
map <C-c> <Esc>
map <C-s> <Action>(SaveAll)
map <C-j> o<Esc>
imap jk <Esc>

" Nicer searching
set ignorecase smartcase

" IntelliJ IDEA specific settings
if &ide =~? 'intellij idea'
    map <leader>sf <Action>(SearchEverywhere)
    map <leader>bb <Action>(CompileDirty)
    map <leader>bo <Action>(StepOver)
    map <leader>ge <Action>(GotoNextError)
endif